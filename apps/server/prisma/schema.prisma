generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model Category {
  id               String     @id @default(cuid())
  name             String     @unique
  icon             String?
  products         Product[]
  subCategories    Category[] @relation("SubCategories")
  parentCategory   Category?  @relation("SubCategories", fields: [parentCategoryId], references: [id])
  parentCategoryId String?

  @@map("categories")
}

model User {
  id                    String          @id @default(cuid())
  firstName             String?
  lastName              String?
  email                 String          @unique
  age                   Int?
  avatar                String?
  phone                 String?
  password              String
  dob                   DateTime?
  gender                String?
  school                String?
  background            String?
  workAt                String?
  address               String?
  posts                 Post[]
  userGroups            GroupsOnUser[]
  groupsRoles           RolesOnGroup[]
  groups                Group[]
  page                  Page?           @relation(fields: [pageId], references: [id])
  pageId                String?
  stories               Story[]
  likes                 Like[]
  comments              Comment[]
  senderFriendRequest   FriendRequest[] @relation("senderFriendRequest")
  receiverFriendRequest FriendRequest[] @relation("receiverFriendRequest")
  users                 FriendShip[]    @relation("userFriendShip")
  userOfs               FriendShip[]    @relation("userOfFriendShip")
  shortCuts             ShortCut[]

  @@map("users")
}

model ShortCut {
  id String @id @default(cuid())

  groupId String
  group   Group  @relation(fields: [groupId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@map("short_cuts")
}

enum FriendStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model FriendRequest {
  id String @id @default(cuid())

  senderId String
  sender   User   @relation("senderFriendRequest", fields: [senderId], references: [id])

  receiverId String
  receiver   User   @relation("receiverFriendRequest", fields: [receiverId], references: [id])

  status    FriendStatus
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@map("friend_requests")
}

model FriendShip {
  id String @id @default(cuid())

  userId String
  user   User   @relation("userFriendShip", fields: [userId], references: [id])

  userOfId String
  userOf   User   @relation("userOfFriendShip", fields: [userOfId], references: [id])

  friendSince DateTime @default(now())

  @@map("friend_ship")
}

model Story {
  id        String   @id @default(cuid())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  content   String?
  media     String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@map("stories")
}

model Page {
  id          String   @id @default(cuid())
  name        String
  description String?
  avatar      String?
  cover       String?
  followers   User[]
  posts       Post[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("pages")
}

enum PublishType {
  PUBLIC
  FRIENDS
  FRIENDS_EXCEPT
  ONLY_ME
  SPECIFIC_FRIENDS
  CUSTOM
}

enum RoleOnGroup {
  ADMIN
  MOD
  MEMBER
}

enum TypeOfGroup {
  PUBLIC
  PRIVATE
}

model Post {
  id          String      @id @default(cuid())
  user        User?       @relation(fields: [userId], references: [id])
  userId      String?
  content     String?
  location    String?
  media       Json?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  publishType PublishType @default(PUBLIC)
  isDeleted   Boolean     @default(false)
  page        Page?       @relation(fields: [pageId], references: [id])
  pageId      String?
  likes       Like[]
  comments    Comment[]

  @@index([userId])
  @@map("posts")
}

model Comment {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  content   String
  media     Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, postId])
  @@map("comments")
}

enum TypeOfLike {
  LIKE
  LOVE
  CARE
  HAHA
  WOW
  SAD
  ANGRY
}

model Like {
  id     String     @id @default(cuid())
  user   User       @relation(fields: [userId], references: [id])
  userId String
  post   Post       @relation(fields: [postId], references: [id])
  postId String
  type   TypeOfLike

  @@index([userId, postId])
  @@map("likes")
}

model Product {
  id          String   @id @default(cuid())
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  name        String?
  price       Int?
  description String?
  location    String?
  images      Json?
  @@index([categoryId])
  @@map("products")
}

model Group {
  id            String         @id @default(cuid())
  name          String         @unique
  userId        String
  type          TypeOfGroup
  users         GroupsOnUser[]
  user          User           @relation(fields: [userId], references: [id])
  rolesOnGroups RolesOnGroup[]
  background    String?
  shortCuts     ShortCut[]
  avatar        String?

  @@index([userId])
  @@map("groups")
}

model RolesOnGroup {
  user    User        @relation(fields: [userId], references: [id])
  userId  String
  group   Group       @relation(fields: [groupId], references: [id])
  groupId String
  role    RoleOnGroup

  @@id([userId, groupId])
  @@map("group_roles")
}

model GroupsOnUser {
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  group   Group  @relation(fields: [groupId], references: [id])
  groupId String

  @@id([userId, groupId])
  @@index([groupId, userId])
  @@map("group_members")
}
