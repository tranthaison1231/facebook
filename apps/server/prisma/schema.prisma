generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id               String     @id @default(cuid())
  name             String     @unique
  icon             String?
  products         Product[]
  subCategories    Category[] @relation("SubCategories")
  parentCategory   Category?  @relation("SubCategories", fields: [parentCategoryId], references: [id])
  parentCategoryId String?
  @@map("categories")
}

model User {
  id          String         @id @default(cuid())
  firstName   String?
  lastName    String?
  email       String         @unique
  age         Int?
  avatar      String?
  phone       String?
  password    String
  dob         DateTime?
  gender      String?
  school      String?
  background  String?
  workAt      String?
  address     String?
  posts       Post[]
  userGroups  GroupsOnUser[]
  groupsRoles RolesOnGroup[]
  groups      Group[]
  page        Page?          @relation(fields: [pageId], references: [id])
  pageId      String?

  @@map("users")
}

model Page {
  id          String   @id @default(cuid())
  name        String
  description String?
  avatar      String?
  cover       String?
  followers   User[]
  posts       Post[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("pages")
}

enum PublishType {
  PUBLIC
  FRIENDS
  FRIENDS_EXCEPT
  ONLY_ME
  SPECIFIC_FRIENDS
  CUSTOM
}

enum RoleOnGroup {
  ADMIN
  MOD
  MEMBER
}

enum TypeOfGroup {
  PUBLIC
  PRIVATE
}

model Post {
  id          String      @id @default(cuid())
  user        User?       @relation(fields: [userId], references: [id])
  userId      String?
  content     String?
  location    String?
  media       String[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  publishType PublishType @default(PUBLIC)
  isDeleted   Boolean     @default(false)
  page        Page?       @relation(fields: [pageId], references: [id])
  pageId      String?

  @@index([userId])
  @@map("posts")
}

model Product {
  id          String   @id @default(cuid())
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  name        String?
  price       Int?
  description String?
  location    String?
  images      Json?

  @@index([categoryId])
}

model Group {
  id           String         @id @default(cuid())
  name         String
  userId       String
  type         TypeOfGroup
  users        GroupsOnUser[]
  User         User           @relation(fields: [userId], references: [id])
  RolesOnGroup RolesOnGroup[]

  @@index([userId])
  @@map("groups")
}

model RolesOnGroup {
  user    User        @relation(fields: [userId], references: [id])
  userId  String
  group   Group       @relation(fields: [groupId], references: [id])
  groupId String
  role    RoleOnGroup

  @@id([userId, groupId])
  @@map("group_roles")
}

model GroupsOnUser {
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  group   Group  @relation(fields: [groupId], references: [id])
  groupId String

  @@id([userId, groupId])
  @@index([groupId, userId])
  @@map("group_members")
}